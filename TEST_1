#include <MsTimer2.h>
#define ENCODER_A1 2
#define ENCODER_B1 4
#define PWM1 6
#define AIN2 9
#define AIN1 7

#define ENCODER_A2 3
#define ENCODER_B2 5
#define PWM2 10
#define AIN4 11
#define AIN3 12
#define L1 17
#define L2 18
#define L3 19
#define R1 16
#define R2 15
#define R3 14
#define M 13

#define PERIOD 20
int T=20;

float target1=2.0,t1;
float target2=2.0,t2;
volatile long encoderVal1;
float velocity1;
volatile long encoderVal2;
float velocity2;
float u, eII, eIII;
float u_2, eII2, eIII2;

#define V 30

void control(void)
{
  int i,count=0;
  if(digitalRead(M)==HIGH)
  {
    target1=V;
    target2=V;
    T=20;
    count=1;
  }
  if(digitalRead(L1)==HIGH)
  {
    target1=1.1*V;
    target2=V*0.3;
    T=20;
    count=1;
  }
  if(digitalRead(R1)==HIGH)
  {
    target1=0.3*V;
    target2=1.1*V;
    T=20;
    count=1;
  }
  if(digitalRead(L2)==HIGH)
  {
    target1=1.2*V;
    target2=0.3*V;
    T=20;
    count=1;
  }
  if(digitalRead(R2)==HIGH)
  {
    target1=V*0.3;
    target2=V*1.2;
    T=20;
  }
  if(digitalRead(L3)==HIGH&&digitalRead(M)!=HIGH&&digitalRead(L1)!=HIGH&&digitalRead(R1)!=HIGH&&digitalRead(R2)!=HIGH&&digitalRead(R3)!=HIGH)
  {
    target1=0*V;
    target2=1.5*V;
    T=20;
    //count=1;
  }
  if(digitalRead(R3)==HIGH&&digitalRead(M)!=HIGH&&digitalRead(L1)!=HIGH&&digitalRead(R1)!=HIGH&&digitalRead(L2)!=HIGH&&digitalRead(L3)!=HIGH)
  {
    target1=1.5*V;
    target2=0*V;
    T=20;
    //count=1;
  }
  if(digitalRead(L3)==HIGH&&(digitalRead(M)==HIGH||digitalRead(L1)==HIGH||digitalRead(R1)==HIGH||digitalRead(R2)==HIGH))
  {
    target1=0.1*V;
    target2=-1.6*V;
    T=20;
  }
  if(digitalRead(R3)==HIGH&&(digitalRead(M)==HIGH||digitalRead(L1)==HIGH||digitalRead(R1)==HIGH||digitalRead(R2)==HIGH))
  {
    target1=-1.6*V;
    target2=0.1*V;
    T=20;
  }
  if(digitalRead(L1)==LOW&&digitalRead(L2)==LOW&&digitalRead(L3)==LOW&&digitalRead(R1)==LOW&&digitalRead(R2)==LOW&&digitalRead(R3)==LOW&&digitalRead(M)==LOW)
  {
    target1=0.8*V;
    target2=0.8*V;
    T=20;
    count=1;
  }
  target1=target1*0.6+t1*0.4;
  target2=target2*0.6+t2*0.4;
  
  velocity1=(encoderVal1/780.0)*3.1414*2.0*(1000/PERIOD);
  encoderVal1=0;
  velocity2=(encoderVal2/780.0)*3.1414*2.0*(1000/PERIOD);
  encoderVal2=0;
    int output1=pidController1(target1,velocity1);
    int output2=pidController2(target2,-velocity2);
    if (output1 > 0)
    {
      digitalWrite(AIN1, HIGH);
      digitalWrite(AIN2, LOW);
      analogWrite(PWM1, output1);
    }
    else
    {
      digitalWrite(AIN1, LOW);
      digitalWrite(AIN2, HIGH);
      analogWrite(PWM1, abs(output1));
    }
    if (output2 > 0)
    {
      digitalWrite(AIN3, LOW);
      digitalWrite(AIN4, HIGH);
      analogWrite(PWM2, output2);
    }
    else
    {
      digitalWrite(AIN3, HIGH);
      digitalWrite(AIN4, LOW);
      analogWrite(PWM2, abs(output2));
    }
}

void getEncoder1(void)
{
  if(digitalRead(ENCODER_A1)==LOW)
  {
    if(digitalRead(ENCODER_B1)==LOW)
    {
      encoderVal1--;
    }
    else
    {
      encoderVal1++;
    }
  }
  else
  {
    if(digitalRead(ENCODER_B1)==LOW)
    {
      encoderVal1++;
    }
    else
    {
      encoderVal1--;
    }
  }
}

void getEncoder2(void)
{
    if(digitalRead(ENCODER_A2)==LOW)
    {
      if(digitalRead(ENCODER_B2)==LOW)
      {
        encoderVal2--;
      }
      else
      {
        encoderVal2++;
      }
    }
    else
    {
      if(digitalRead(ENCODER_B2)==LOW)
      {
        encoderVal2++;
      }
      else
      {
        encoderVal2--;
      }
    }
}

int pidController1(float targetVelocity,float currentVelocity)
{
  float output,eI;
  eI = targetVelocity - currentVelocity;
  float Kp = 50.0, Ti = 0.1,Td = 100.0;
  float q0 = Kp * (1 + T / Ti + Td / T);
  float q1 = -Kp * (1 + 2 * Td / T);
  float q2 = Kp * Td / T;
  u = u + q0 * eI + q1 * eII + q2 * eIII;
  eIII = eII;
  eII = eI;
  if (u >= 255)
  {
    u = 255;
  }
  if (u <= -255)
  {
    u = -255;
  }
  output = u;
  return (int)output;
}
int pidController2(float targetVelocity,float currentVelocity)
{
  float output,eI;
  eI = targetVelocity - currentVelocity;
  float Kp = 50.0, Ti = 0.1, Td = 100.0;
  float q0 = Kp * (1 + T / Ti + Td / T);
  float q1 = -Kp * (1 + 2 * Td / T);
  float q2 = Kp * Td / T;
  u_2 = u_2 + q0 * eI + q1 * eII2 + q2 * eIII2;
  eIII2 = eII2;
  eII2 = eI;
  if (u_2 >= 255)
  {
    u_2 = 255;
  }
  if (u_2 <= -255)
  {
    u_2 = -255;
  }
  output = u_2;
  return (int)output;
}

void setup() 
{
  TCCR1B=TCCR1B&B11111000|B00000001;
  pinMode(ENCODER_A1,INPUT);
  pinMode(ENCODER_B1,INPUT);
  pinMode(ENCODER_A2,INPUT);
  pinMode(ENCODER_B2,INPUT);
  pinMode(PWM1,OUTPUT);
  pinMode(PWM2,OUTPUT);
  pinMode(AIN2,OUTPUT);
  pinMode(AIN1,OUTPUT);
  pinMode(AIN4,OUTPUT);
  pinMode(AIN3,OUTPUT);
  pinMode(R1,INPUT);
  pinMode(R2,INPUT);
  pinMode(R3,INPUT);
  pinMode(L1,INPUT);
  pinMode(L2,INPUT);
  pinMode(L3,INPUT);
  pinMode(M,INPUT);
  attachInterrupt(0,getEncoder1,CHANGE);
  attachInterrupt(1,getEncoder2,CHANGE);
  Serial.begin(9600);
  MsTimer2::set(T,control);
  MsTimer2::start();
}

void loop() {
  Serial.print(velocity1);
  Serial.print("\t\n");
  Serial.print(velocity2);
  Serial.print("\t\n");
  //Serial.print("\n");
  //Serial.println(u2);
  //Serial.println(u2);
  delay(100);
}
